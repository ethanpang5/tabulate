{"ast":null,"code":"/**\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n'use strict';\n\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\"; // Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAwcnfyJDrxYTVGnbGJ39pwyRPmbbln8jI\",\n  authDomain: \"tabulate-da8ac.firebaseapp.com\",\n  projectId: \"tabulate-da8ac\",\n  storageBucket: \"tabulate-da8ac.appspot.com\",\n  messagingSenderId: \"600957298630\",\n  appId: \"1:600957298630:web:8dff818513beaf9c9734c7\",\n  measurementId: \"G-FRRT9SB5QF\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig);\nconsole.log(firebase); // Signs-in Friendly Chat.\n\nexport function signIn() {\n  // TODO 1: Sign in Firebase with credential from the Google user.\n  // Sign into Firebase using popup auth & Google as the identity provider.\n  let provider = new firebase.auth.GoogleAuthProvider();\n  firebase.auth().signInWithPopup(provider);\n} // Signs-out of Friendly Chat.\n\nexport function signOut() {\n  // TODO 2: Sign out of Firebase.\n  firebase.auth().signOut();\n} // Initiate firebase auth.\n// export function initFirebaseAuth() {\n//   // TODO 3: Initialize Firebase.\n//   firebase.auth().onAuthStateChanged(authStateObserver);\n// }\n// Returns the signed-in user's profile Pic URL.\n\nfunction getProfilePicUrl() {\n  // TODO 4: Return the user's profile pic URL.\n  return firebase.auth().currentUser.photoURL || '/images/profile_placeholder.png';\n} // Returns the signed-in user's display name.\n\n\nexport function getUserName() {\n  // TODO 5: Return the user's display name.\n  return firebase.auth().currentUser.displayName;\n} // Returns true if a user is signed-in.\n\nexport function isUserSignedIn() {\n  // TODO 6: Return true if a user is signed-in.\n  return !!firebase.auth().currentUser;\n}\nexport function addWidget(widgetTitle) {\n  // Add a new message entry to the database.\n  let user = firebase.firestore().collection(\"widget2\").doc(getUserName());\n  console.log(\"64\", user);\n\n  if (user) {\n    user.get().then(doc => {\n      let tempWidgets = doc.data().widgets;\n      return tempWidgets;\n    }).then(tempWidgets => {\n      console.log(\"70\", tempWidgets);\n      tempWidgets.push({\n        title: widgetTitle,\n        links: []\n      });\n      console.log(\"73\", tempWidgets);\n      return user.update({\n        name: getUserName(),\n        //widgets: [{widgetTitle: \"bruh\", links: [{linkName : url}, {}, {}]}],\n        widgets: tempWidgets,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp()\n      }, {\n        merge: true\n      }).catch(function (error) {\n        console.error('Error writing new message to database', error);\n      });\n    });\n  } else {\n    console.log(\"fuckin a\");\n    return user.set({\n      name: getUserName(),\n      widgets: [{\n        title: widgetTitle,\n        links: []\n      }],\n      // do this at sign-in\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    }).catch(function (error) {\n      console.error('Error writing new message to database', error);\n    });\n  }\n}\nexport function addLinkToWidget(widgetName, website, url) {\n  // Add a new message entry to the database.\n  let user = firebase.firestore().collection(\"widget2\").doc(getUserName());\n  let tempWidgets = [\"check this\"];\n  console.log(\"92\");\n  user.get().then(doc => {\n    console.log(\"96\", doc.data());\n    tempWidgets = doc.data().widgets;\n    console.log(\"98\", tempWidgets);\n    const toEdit = tempWidgets.find(obj => {\n      return obj.title === widgetName;\n    });\n    console.log(\"103\", toEdit);\n    toEdit.links.push({\n      url: url,\n      name: website\n    });\n    tempWidgets.map(obj => obj);\n    console.log(\"108\", toEdit);\n    console.log(\"109\", tempWidgets);\n  }).then(() => {\n    console.log(\"111\", tempWidgets);\n    return user.update({\n      name: getUserName(),\n      //widgets: [{widgetTitle: \"bruh\", links: [{linkName : url}, {}, {}]}],\n      widgets: tempWidgets,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    }, {\n      merge: true\n    }).catch(function (error) {\n      console.error('Error writing new message to database', error);\n    });\n  }).catch(error => {\n    console.log(\"Error getting document:\", error);\n  });\n} // Loads chat messages history and listens for upcoming ones.\n// Returns true if user is signed-in. Otherwise false and displays a message.\n\nexport function checkSignedInWithMessage() {\n  // Return true if the user is signed in Firebase\n  if (isUserSignedIn()) {\n    return true;\n  }\n} // Resets the given MaterialTextField.\n\nexport function resetMaterialTextfield(element) {\n  element.value = '';\n  element.parentNode.MaterialTextfield.boundUpdateClassesHandler();\n} // Checks that the Firebase SDK has been correctly setup and configured.\n\nexport function checkSetup() {\n  if (!window.firebase || !(firebase.app instanceof Function) || !firebase.app().options) {\n    window.alert('You have not configured and imported the Firebase SDK. ' + 'Make sure you go through the codelab setup instructions and make ' + 'sure you are running the codelab using `firebase serve`');\n  }\n}\ncheckSetup(); // initialize Firebase\n// initFirebaseAuth();\n// TODO: Enable Firebase Performance Monitoring.\n// We load currently existing chat messages and listen to new ones.\n\nexport function bruh() {\n  console.log(\"have a wonderful day!\");\n}","map":{"version":3,"sources":["C:/Users/EthanP/Documents/cubstart/tabulate/tab-ulate/src/scripts/login.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","console","log","signIn","provider","auth","GoogleAuthProvider","signInWithPopup","signOut","getProfilePicUrl","currentUser","photoURL","getUserName","displayName","isUserSignedIn","addWidget","widgetTitle","user","firestore","collection","doc","get","then","tempWidgets","data","widgets","push","title","links","update","name","timestamp","FieldValue","serverTimestamp","merge","catch","error","set","addLinkToWidget","widgetName","website","url","toEdit","find","obj","map","checkSignedInWithMessage","resetMaterialTextfield","element","value","parentNode","MaterialTextfield","boundUpdateClassesHandler","checkSetup","window","app","Function","options","alert","bruh"],"mappings":"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","sourcesContent":["/**\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n'use strict';\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\n// Your web app's Firebase configuration\r\n  // For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyAwcnfyJDrxYTVGnbGJ39pwyRPmbbln8jI\",\r\n    authDomain: \"tabulate-da8ac.firebaseapp.com\",\r\n    projectId: \"tabulate-da8ac\",\r\n    storageBucket: \"tabulate-da8ac.appspot.com\",\r\n    messagingSenderId: \"600957298630\",\r\n    appId: \"1:600957298630:web:8dff818513beaf9c9734c7\",\r\n    measurementId: \"G-FRRT9SB5QF\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  console.log(firebase);\r\n\r\n// Signs-in Friendly Chat.\r\nexport function signIn() {\r\n  // TODO 1: Sign in Firebase with credential from the Google user.\r\n  // Sign into Firebase using popup auth & Google as the identity provider.\r\n  let provider = new firebase.auth.GoogleAuthProvider();\r\n  firebase.auth().signInWithPopup(provider);\r\n}\r\n\r\n// Signs-out of Friendly Chat.\r\nexport function signOut() {\r\n  // TODO 2: Sign out of Firebase.\r\n  firebase.auth().signOut();\r\n\r\n}\r\n\r\n// Initiate firebase auth.\r\n// export function initFirebaseAuth() {\r\n//   // TODO 3: Initialize Firebase.\r\n//   firebase.auth().onAuthStateChanged(authStateObserver);\r\n// }\r\n\r\n// Returns the signed-in user's profile Pic URL.\r\nfunction getProfilePicUrl() {\r\n  // TODO 4: Return the user's profile pic URL.\r\n  return firebase.auth().currentUser.photoURL || '/images/profile_placeholder.png';\r\n}\r\n\r\n// Returns the signed-in user's display name.\r\nexport function getUserName() {\r\n  // TODO 5: Return the user's display name.\r\n  return firebase.auth().currentUser.displayName;\r\n\r\n}\r\n\r\n// Returns true if a user is signed-in.\r\nexport function isUserSignedIn() {\r\n  // TODO 6: Return true if a user is signed-in.\r\n  return !!firebase.auth().currentUser;\r\n}\r\n\r\nexport function addWidget(widgetTitle) {\r\n  // Add a new message entry to the database.\r\n  let user = firebase.firestore().collection(\"widget2\").doc(getUserName());\r\n  console.log(\"64\", user)\r\n\r\n  if (user) {\r\n    user.get().then((doc) => {\r\n      let tempWidgets = doc.data().widgets;\r\n      return tempWidgets\r\n    }).then((tempWidgets) => {\r\n      console.log(\"70\", tempWidgets)\r\n\r\n      tempWidgets.push({title: widgetTitle, links: []});\r\n      console.log(\"73\", tempWidgets)\r\n      \r\n      \r\n      return user.update({\r\n        name: getUserName(),\r\n        //widgets: [{widgetTitle: \"bruh\", links: [{linkName : url}, {}, {}]}],\r\n        widgets: tempWidgets,\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n      }, { merge: true }).catch(function (error) {\r\n        console.error('Error writing new message to database', error);\r\n      });\r\n    })\r\n    }\r\n  else {\r\n    console.log(\"fuckin a\")\r\n    return user.set({\r\n      name: getUserName(),\r\n      widgets: [{ title: widgetTitle, links: [] }], // do this at sign-in\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n    }).catch(function (error) {\r\n      console.error('Error writing new message to database', error);\r\n    });\r\n  }\r\n}\r\n\r\nexport function addLinkToWidget(widgetName, website, url) {\r\n  // Add a new message entry to the database.\r\n  let user = firebase.firestore().collection(\"widget2\").doc(getUserName());\r\n\r\n  let tempWidgets = [\"check this\"];\r\n  console.log(\"92\")\r\n\r\n\r\n  user.get().then((doc) => {\r\n    console.log(\"96\", doc.data())\r\n    tempWidgets = doc.data().widgets;\r\n    console.log(\"98\", tempWidgets)\r\n\r\n    const toEdit = tempWidgets.find(obj => {\r\n      return obj.title === widgetName\r\n    });\r\n    console.log(\"103\", toEdit)\r\n\r\n\r\n    toEdit.links.push({ url: url, name: website });\r\n    tempWidgets.map(obj => obj); \r\n    console.log(\"108\", toEdit)\r\n    console.log(\"109\", tempWidgets)\r\n\r\n  }).then(() => {console.log(\"111\", tempWidgets);\r\n\r\n  return user.update({\r\n    name: getUserName(),\r\n    //widgets: [{widgetTitle: \"bruh\", links: [{linkName : url}, {}, {}]}],\r\n    widgets: tempWidgets,\r\n    timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n  }, { merge: true }).catch(function (error) {\r\n    console.error('Error writing new message to database', error);\r\n  });\r\n}).catch((error) => {\r\n  console.log(\"Error getting document:\", error);\r\n})\r\n\r\n\r\n  \r\n\r\n  \r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n// Loads chat messages history and listens for upcoming ones.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Returns true if user is signed-in. Otherwise false and displays a message.\r\nexport function checkSignedInWithMessage() {\r\n  // Return true if the user is signed in Firebase\r\n  if (isUserSignedIn()) {\r\n    return true;\r\n  }\r\n}\r\n// Resets the given MaterialTextField.\r\nexport function resetMaterialTextfield(element) {\r\n  element.value = '';\r\n  element.parentNode.MaterialTextfield.boundUpdateClassesHandler();\r\n}\r\n\r\n\r\n// Checks that the Firebase SDK has been correctly setup and configured.\r\nexport function checkSetup() {\r\n  if (!window.firebase || !(firebase.app instanceof Function) || !firebase.app().options) {\r\n    window.alert('You have not configured and imported the Firebase SDK. ' +\r\n      'Make sure you go through the codelab setup instructions and make ' +\r\n      'sure you are running the codelab using `firebase serve`');\r\n  }\r\n}\r\ncheckSetup();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// initialize Firebase\r\n// initFirebaseAuth();\r\n\r\n// TODO: Enable Firebase Performance Monitoring.\r\n\r\n// We load currently existing chat messages and listen to new ones.\r\n\r\n\r\nexport function bruh() {\r\n  console.log(\"have a wonderful day!\");\r\n}\r\n"]},"metadata":{},"sourceType":"module"}